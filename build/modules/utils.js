var fs = require('fs');
module.exports = {
    // NOTE: this is not cryptographically secure. Only use this for very unimportant passwords
    /* requirements = {lowercase: true, uppercase: true, numbers: true, symbols: true} */
    /* specialLists = {lowercase: "??", uppercase: "??", numbers: "??", symbols: "??"} */
    generatePassword: function (length, requirements, specialLists) {
        var lowercase = 'abcdefghijklmnopqrstuvwxyz';
        var uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        var numbers = '0123456789';
        var symbols = '!@#$%^&*()-_+=,<.>/?|`~';
        if (specialLists) {
            if (specialLists.lowercase) {
                lowercase = specialLists.lowercase;
            }
            if (specialLists.uppercase) {
                uppercase = specialLists.uppercase;
            }
            if (specialLists.numbers) {
                numbers = specialLists.numbers;
            }
            if (specialLists.symbols) {
                symbols = specialLists.symbols;
            }
        }
        if (!requirements) {
            requirements = {};
        }
        if (!requirements.lowercase) {
            requirements.lowercase = true;
        }
        if (!requirements.uppercase) {
            requirements.uppercase = true;
        }
        if (!requirements.numbers) {
            requirements.numbers = true;
        }
        if (!requirements.symbols) {
            requirements.symbols = true;
        }
        if (!length) {
            length = 24;
        }
        var characters = ((requirements.lowercase) ? lowercase : '') + ((requirements.uppercase) ? uppercase : '') + ((requirements.numbers) ? numbers : '') + ((requirements.symbols) ? symbols : '');
        var password = '';
        for (var i = 0; i < length; i++) {
            password += characters[Math.floor(Math.random() * characters.length)];
        }
        return password;
    },
    backupFile: function (path, modifier) {
        if (!modifier) {
            modifier = function (path) {
                return path += '.back';
            };
        }
        fs.renameSync(path, modifier(path));
    },
    replaceAll: function (input, find, replace) {
        return input.replace(new RegExp(find, 'g'), replace);
    }
};

//# sourceMappingURL=data:application/json;base64,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LE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzFFLENBQUM7UUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFDRCxVQUFVLEVBQUUsVUFBQyxJQUFJLEVBQUUsUUFBUTtRQUN2QixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDWixRQUFRLEdBQUcsVUFBQyxJQUFJO2dCQUNaLE1BQU0sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDO1lBQzNCLENBQUMsQ0FBQztRQUNOLENBQUM7UUFFRCxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsVUFBVSxFQUFFLFVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPO1FBQzdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDO0NBQ0osQ0FBQyIsImZpbGUiOiJtb2R1bGVzL3V0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLy8gTk9URTogdGhpcyBpcyBub3QgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlLiBPbmx5IHVzZSB0aGlzIGZvciB2ZXJ5IHVuaW1wb3J0YW50IHBhc3N3b3Jkc1xuICAgIC8qIHJlcXVpcmVtZW50cyA9IHtsb3dlcmNhc2U6IHRydWUsIHVwcGVyY2FzZTogdHJ1ZSwgbnVtYmVyczogdHJ1ZSwgc3ltYm9sczogdHJ1ZX0gKi9cbiAgICAvKiBzcGVjaWFsTGlzdHMgPSB7bG93ZXJjYXNlOiBcIj8/XCIsIHVwcGVyY2FzZTogXCI/P1wiLCBudW1iZXJzOiBcIj8/XCIsIHN5bWJvbHM6IFwiPz9cIn0gKi9cbiAgICBnZW5lcmF0ZVBhc3N3b3JkOiAobGVuZ3RoLCByZXF1aXJlbWVudHMsIHNwZWNpYWxMaXN0cykgPT4ge1xuICAgICAgICB2YXIgbG93ZXJjYXNlID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcbiAgICAgICAgdmFyIHVwcGVyY2FzZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWic7XG4gICAgICAgIHZhciBudW1iZXJzID0gJzAxMjM0NTY3ODknO1xuICAgICAgICB2YXIgc3ltYm9scyA9ICchQCMkJV4mKigpLV8rPSw8Lj4vP3xgfic7XG4gICAgICAgIGlmIChzcGVjaWFsTGlzdHMpIHtcbiAgICAgICAgICAgIGlmIChzcGVjaWFsTGlzdHMubG93ZXJjYXNlKSB7XG4gICAgICAgICAgICAgICAgbG93ZXJjYXNlID0gc3BlY2lhbExpc3RzLmxvd2VyY2FzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzcGVjaWFsTGlzdHMudXBwZXJjYXNlKSB7XG4gICAgICAgICAgICAgICAgdXBwZXJjYXNlID0gc3BlY2lhbExpc3RzLnVwcGVyY2FzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzcGVjaWFsTGlzdHMubnVtYmVycykge1xuICAgICAgICAgICAgICAgIG51bWJlcnMgPSBzcGVjaWFsTGlzdHMubnVtYmVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzcGVjaWFsTGlzdHMuc3ltYm9scykge1xuICAgICAgICAgICAgICAgIHN5bWJvbHMgPSBzcGVjaWFsTGlzdHMuc3ltYm9scztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVxdWlyZW1lbnRzKSB7XG4gICAgICAgICAgICByZXF1aXJlbWVudHMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlcXVpcmVtZW50cy5sb3dlcmNhc2UpIHtcbiAgICAgICAgICAgIHJlcXVpcmVtZW50cy5sb3dlcmNhc2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVxdWlyZW1lbnRzLnVwcGVyY2FzZSkge1xuICAgICAgICAgICAgcmVxdWlyZW1lbnRzLnVwcGVyY2FzZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXF1aXJlbWVudHMubnVtYmVycykge1xuICAgICAgICAgICAgcmVxdWlyZW1lbnRzLm51bWJlcnMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVxdWlyZW1lbnRzLnN5bWJvbHMpIHtcbiAgICAgICAgICAgIHJlcXVpcmVtZW50cy5zeW1ib2xzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgbGVuZ3RoID0gMjQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hhcmFjdGVycyA9ICgocmVxdWlyZW1lbnRzLmxvd2VyY2FzZSkgPyBsb3dlcmNhc2UgOiAnJykgKyAoKHJlcXVpcmVtZW50cy51cHBlcmNhc2UpID8gdXBwZXJjYXNlIDogJycpICsgKChyZXF1aXJlbWVudHMubnVtYmVycykgPyBudW1iZXJzIDogJycpICsgKChyZXF1aXJlbWVudHMuc3ltYm9scykgPyBzeW1ib2xzIDogJycpO1xuICAgICAgICB2YXIgcGFzc3dvcmQgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFzc3dvcmQgKz0gY2hhcmFjdGVyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzLmxlbmd0aCldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhc3N3b3JkO1xuICAgIH0sXG4gICAgYmFja3VwRmlsZTogKHBhdGgsIG1vZGlmaWVyKSA9PiB7XG4gICAgICAgIGlmICghbW9kaWZpZXIpIHtcbiAgICAgICAgICAgIG1vZGlmaWVyID0gKHBhdGgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF0aCArPSAnLmJhY2snO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZzLnJlbmFtZVN5bmMocGF0aCwgbW9kaWZpZXIocGF0aCkpO1xuICAgIH0sXG4gICAgcmVwbGFjZUFsbDogKGlucHV0LCBmaW5kLCByZXBsYWNlKSA9PiB7XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoZmluZCwgJ2cnKSwgcmVwbGFjZSk7XG4gICAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
