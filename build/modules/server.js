"use strict";
var fs = require('fs');
var utils_1 = require('./utils');
var SERVICE_NAME = 'DEFAULT';
module.exports = function (callbacks) {
    var server = {
        app: undefined,
        appServer: undefined,
        init: function (express, app) {
            return new Promise(function (resolve) {
                console.log('Initializing server');
                server.app = app;
                var configPage = fs.readFileSync('./modules/pages/configure.html').toString();
                configPage = utils_1.Utils.replaceAll(configPage, '{{SERVICE_NAME}}', SERVICE_NAME);
                var finishConfigPage = fs.readFileSync('./modules/pages/finish_configure.html').toString();
                finishConfigPage = utils_1.Utils.replaceAll(finishConfigPage, '{{SERVICE_NAME}}', SERVICE_NAME);
                app.use(express.static('./modules/pages/static'));
                app.get('/', function (req, res) {
                    res.send(configPage);
                    if (callbacks && callbacks.onClientConfiguring) {
                        callbacks.onClientConfiguring();
                    }
                });
                app.get('/get-questions', function (req, res) {
                    res.send(configPage);
                    if (callbacks && callbacks.onClientConfiguring) {
                        callbacks.onClientConfiguring();
                    }
                });
                app.post('/save-settings', function (req, res) {
                    console.log(req.body);
                    res.send(finishConfigPage);
                    if (callbacks && callbacks.onSetupComplete) {
                        callbacks.onSetupComplete(req.body);
                    }
                });
                resolve();
            });
        },
        start: function (port) {
            return new Promise(function (resolve) {
                console.log('Starting server');
                server.appServer = server.app.listen(port, function () {
                    console.log("Listening on " + server.appServer.address().port);
                    resolve();
                });
            });
        },
        stop: function () {
            return new Promise(function (resolve) {
                console.log('Stopping server');
                if (server.appServer) {
                    server.appServer.close();
                }
                resolve();
            });
        }
    };
    return server;
};

//# sourceMappingURL=data:application/json;base64,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QUFDLEdBQUcsQ0FBQyxrQkFBZ0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFNLENBQUMsQ0FBQztvQkFDL0QsT0FBTyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFDRCxJQUFJLEVBQUU7WUFDRixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPO2dCQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7Z0JBQy9CLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNuQixNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUM3QixDQUFDO2dCQUVELE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0tBQ0osQ0FBQztJQUVGLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvc2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCB7VXRpbHN9IGZyb20gJy4vdXRpbHMnO1xuXG52YXIgU0VSVklDRV9OQU1FID0gJ0RFRkFVTFQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChjYWxsYmFja3MpID0+IHtcbiAgICB2YXIgc2VydmVyID0ge1xuICAgICAgICBhcHA6IHVuZGVmaW5lZCxcbiAgICAgICAgYXBwU2VydmVyOiB1bmRlZmluZWQsXG5cbiAgICAgICAgaW5pdDogKGV4cHJlc3MsIGFwcCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0luaXRpYWxpemluZyBzZXJ2ZXInKTtcbiAgICAgICAgICAgICAgICBzZXJ2ZXIuYXBwID0gYXBwO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZ1BhZ2UgPSBmcy5yZWFkRmlsZVN5bmMoJy4vbW9kdWxlcy9wYWdlcy9jb25maWd1cmUuaHRtbCcpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY29uZmlnUGFnZSA9IFV0aWxzLnJlcGxhY2VBbGwoY29uZmlnUGFnZSwgJ3t7U0VSVklDRV9OQU1FfX0nLCBTRVJWSUNFX05BTUUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGZpbmlzaENvbmZpZ1BhZ2UgPSBmcy5yZWFkRmlsZVN5bmMoJy4vbW9kdWxlcy9wYWdlcy9maW5pc2hfY29uZmlndXJlLmh0bWwnKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGZpbmlzaENvbmZpZ1BhZ2UgPSBVdGlscy5yZXBsYWNlQWxsKGZpbmlzaENvbmZpZ1BhZ2UsICd7e1NFUlZJQ0VfTkFNRX19JywgU0VSVklDRV9OQU1FKTtcblxuICAgICAgICAgICAgICAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMoJy4vbW9kdWxlcy9wYWdlcy9zdGF0aWMnKSk7XG5cbiAgICAgICAgICAgICAgICBhcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5zZW5kKGNvbmZpZ1BhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5vbkNsaWVudENvbmZpZ3VyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25DbGllbnRDb25maWd1cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBhcHAuZ2V0KCcvZ2V0LXF1ZXN0aW9ucycsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICAgICAgICAgICAgICByZXMuc2VuZChjb25maWdQYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrcyAmJiBjYWxsYmFja3Mub25DbGllbnRDb25maWd1cmluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uQ2xpZW50Q29uZmlndXJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgYXBwLnBvc3QoJy9zYXZlLXNldHRpbmdzJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcS5ib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnNlbmQoZmluaXNoQ29uZmlnUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja3MgJiYgY2FsbGJhY2tzLm9uU2V0dXBDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uU2V0dXBDb21wbGV0ZShyZXEuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzdGFydDogKHBvcnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTdGFydGluZyBzZXJ2ZXInKTtcbiAgICAgICAgICAgICAgICBzZXJ2ZXIuYXBwU2VydmVyID0gc2VydmVyLmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTGlzdGVuaW5nIG9uICR7c2VydmVyLmFwcFNlcnZlci5hZGRyZXNzKCkucG9ydH1gKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3A6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTdG9wcGluZyBzZXJ2ZXInKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VydmVyLmFwcFNlcnZlcikge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXIuYXBwU2VydmVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHNlcnZlcjtcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
